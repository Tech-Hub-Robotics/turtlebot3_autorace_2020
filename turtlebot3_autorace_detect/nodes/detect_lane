#!/usr/bin/env python
# -*- coding: utf-8 -*-

import rospy
import numpy as np
import cv2
from cv_bridge import CvBridge
from std_msgs.msg import Float64
from sensor_msgs.msg import Image, CompressedImage
from dynamic_reconfigure.server import Server
from turtlebot3_autorace_detect.cfg import DetectLaneParamsConfig

class DetectLane():
    def __init__(self):
        # White and Blue Line Detection Parameters
        self.hue_white_l = rospy.get_param("~detect/lane/white/hue_l", 0)
        self.hue_white_h = rospy.get_param("~detect/lane/white/hue_h", 111)
        self.saturation_white_l = rospy.get_param("~detect/lane/white/saturation_l", 0)
        self.saturation_white_h = rospy.get_param("~detect/lane/white/saturation_h", 38)
        self.lightness_white_l = rospy.get_param("~detect/lane/white/lightness_l", 126)
        self.lightness_white_h = rospy.get_param("~detect/lane/white/lightness_h", 255)

        self.hue_blue_l = rospy.get_param("~detect/lane/blue/hue_l", 100)
        self.hue_blue_h = rospy.get_param("~detect/lane/blue/hue_h", 140)
        self.saturation_blue_l = rospy.get_param("~detect/lane/blue/saturation_l", 150)
        self.saturation_blue_h = rospy.get_param("~detect/lane/blue/saturation_h", 255)
        self.lightness_blue_l = rospy.get_param("~detect/lane/blue/lightness_l", 100)
        self.lightness_blue_h = rospy.get_param("~detect/lane/blue/lightness_h", 255)

        self.sub_image_type = "raw"
        self.pub_image_type = "compressed"

        # Image Subscribers and Publishers
        if self.sub_image_type == "compressed":
            self.sub_image_original = rospy.Subscriber('/detect/image_input/compressed', CompressedImage, self.cbFindLane, queue_size=1)
        else:
            self.sub_image_original = rospy.Subscriber('/detect/image_input', Image, self.cbFindLane, queue_size=1)

        if self.pub_image_type == "compressed":
            self.pub_image_lane = rospy.Publisher('/detect/image_output/compressed', CompressedImage, queue_size=1)
        else:
            self.pub_image_lane = rospy.Publisher('/detect/image_output', Image, queue_size=1)

        self.pub_lane = rospy.Publisher('/detect/lane', Float64, queue_size=1)

        self.cvBridge = CvBridge()
        self.counter = 1

    def cbFindLane(self, image_msg):
        # Skip frames to reduce processing load
        if self.counter % 1 != 0:
            self.counter += 1
            return
        else:
            self.counter = 1

        # Convert incoming image to OpenCV format
        if self.sub_image_type == "compressed":
            np_arr = np.frombuffer(image_msg.data, np.uint8)
            cv_image = cv2.imdecode(np_arr, cv2.IMREAD_COLOR)
        else:
            cv_image = self.cvBridge.imgmsg_to_cv2(image_msg, "bgr8")

        # Detect white and blue lanes
        white_fraction, cv_white_lane = self.maskWhiteLane(cv_image)
        blue_fraction, cv_blue_lane = self.maskBlueLane(cv_image)

        # Draw the lanes and calculate the centerline
        self.make_lane(cv_image, white_fraction, blue_fraction)

    def maskWhiteLane(self, image):
        hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
        lower_white = np.array([self.hue_white_l, self.saturation_white_l, self.lightness_white_l])
        upper_white = np.array([self.hue_white_h, self.saturation_white_h, self.lightness_white_h])
        mask = cv2.inRange(hsv, lower_white, upper_white)
        fraction_num = np.count_nonzero(mask)
        return fraction_num, mask

    def maskBlueLane(self, image):
        hsv = cv2.cvtColor(image, cv2.COLOR_BGR2HSV)
        lower_blue = np.array([self.hue_blue_l, self.saturation_blue_l, self.lightness_blue_l])
        upper_blue = np.array([self.hue_blue_h, self.saturation_blue_h, self.lightness_blue_h])
        mask = cv2.inRange(hsv, lower_blue, upper_blue)
        fraction_num = np.count_nonzero(mask)
        return fraction_num, mask

    def make_lane(self, cv_image, white_fraction, blue_fraction):
        ploty = np.linspace(0, cv_image.shape[0] - 1, cv_image.shape[0])

        if white_fraction > 3000 and blue_fraction > 3000:
            # Calculate center between blue and white lines
            centerx = np.mean([self.left_fitx, self.right_fitx], axis=0)  # Average of blue and white
            pts_center = np.array([np.transpose(np.vstack([centerx, ploty]))])
            cv2.polylines(cv_image, np.int_([pts_center]), isClosed=False, color=(0, 255, 255), thickness=12)

        if self.pub_image_type == "compressed":
            msg_desired_center = Float64()
            msg_desired_center.data = centerx.item(350)
            self.pub_lane.publish(msg_desired_center)
            self.pub_image_lane.publish(self.cvBridge.cv2_to_compressed_imgmsg(cv_image, "jpg"))
        else:
            msg_desired_center = Float64()
            msg_desired_center.data = centerx.item(350)
            self.pub_lane.publish(msg_desired_center)
            self.pub_image_lane.publish(self.cvBridge.cv2_to_imgmsg(cv_image, "bgr8"))

    def main(self):
        rospy.spin()

if __name__ == '__main__':
    rospy.init_node('detect_lane')
    node = DetectLane()
    node.main()
